-- spec/minimal_init.lua
-- Fully hermetic bootstrap for headless tests (no user config, no ftplugins).

local fn = vim.fn
local uv = vim.uv or vim.loop

-- 1) Block user config / packages / ftplugins / FileType autocommands
vim.o.loadplugins        = false
vim.o.packpath           = ""
vim.g.did_load_filetypes = 1
vim.g.do_filetype_lua    = 0
vim.g.did_load_ftplugin  = 1
vim.g.did_indent_on      = 1
vim.g.loaded_netrwPlugin = 1
vim.g.loaded_gzip        = 1
vim.g.loaded_tarPlugin   = 1
vim.g.loaded_zipPlugin   = 1
vim.g.loaded_matchit     = 1
vim.g.loaded_matchparen  = 1
vim.opt.eventignore:append("FileType")
pcall(function() vim.api.nvim_clear_autocmds({ event = "FileType" }) end)

-- 2) Minimal &rtp = <repo>, <vendored plenary>, $VIMRUNTIME
local repo       = fn.fnamemodify(".", ":p")
local vimruntime = assert(vim.env.VIMRUNTIME or "", "VIMRUNTIME not set")

local deps    = fn.fnamemodify("./.tests/deps", ":p")
local plenary = deps .. "plenary.nvim"
if not uv.fs_stat(deps) then fn.mkdir(deps, "p") end
if not uv.fs_stat(plenary) then
  fn.system({ "git", "clone", "--depth=1",
              "https://github.com/nvim-lua/plenary.nvim", plenary })
end
vim.o.runtimepath = table.concat({ repo, plenary, vimruntime }, ",")

-- 3) Require the runner (no plugin/*.vim)
local ok_plenary, perr = pcall(require, "plenary.busted")
if not ok_plenary then
  error("plenary.busted not found on rtp=" .. vim.o.runtimepath .. "\n" .. tostring(perr))
end

-- 4) Define :PlenaryBustedDirectory that aggregates all specs into one file
vim.api.nvim_create_user_command("PlenaryBustedDirectory", function(opts)
  local target = (opts.args ~= "" and opts.args) or "spec"

  -- Expand target(s) -> list of spec files
  local files = {}
  local stat = uv.fs_stat(target)
  if stat and stat.type == "file" then
    table.insert(files, target)
  else
    -- directory or glob -> collect **/*.lua
    files = fn.globpath(target, "**/*.lua", false, true)
    table.sort(files)
  end
  if #files == 0 then error("No spec files found under: " .. target) end

  -- Generate aggregator spec: spec/.generated/all_specs.lua
  local gen_dir  = fn.fnamemodify(target .. "/.generated", ":p")
  if not uv.fs_stat(gen_dir) then fn.mkdir(gen_dir, "p") end
  local agg_path = gen_dir .. "all_specs.lua"

  local lines = {
    "-- AUTO-GENERATED by minimal_init.lua",
    "local busted = require('plenary.busted')",
    "-- load each spec file into the same busted run:",
  }
  for _, f in ipairs(files) do
    -- normalise path for Lua: use dofile so it preserves file-level scope for each spec
    table.insert(lines, ("dofile(%q)"):format(f))
  end
  table.insert(lines, "") -- newline

  -- Write aggregator
  local fd = assert(io.open(agg_path, "w"))
  fd:write(table.concat(lines, "\n"))
  fd:close()

  -- Run the single aggregator spec
  require("plenary.busted").run(agg_path)
end, { nargs = "?" })

-- 5) Quiet tests & load plugin under test
vim.opt.swapfile = false
vim.opt.hidden  = true

local ok_md, md_nav = pcall(require, "md_nav")
if not ok_md then
  error("Failed to require md_nav (rtp=" .. vim.o.runtimepath .. ")")
end

md_nav.setup({
  max_depth = 4,          -- H2..H4 in TOC
  footer_levels = { 2 },  -- H2 footers only
  create_frontmatter = true,
  prettify_h1 = true,
  debounce_ms = 200,
  hr = "---",
})
